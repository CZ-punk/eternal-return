plugins {
    id 'java'
    id 'org.springframework.boot' version '3.4.1'
    id 'io.spring.dependency-management' version '1.1.7'
}

group = 'demo'
version = '0.0.1-SNAPSHOT'

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(21)
    }
}

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

repositories {
    mavenCentral()
}

dependencies {
    // JPA
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'

    // BATCH
    implementation 'org.springframework.boot:spring-boot-starter-batch'

    // AWS
    implementation 'io.awspring.cloud:spring-cloud-aws-starter:3.3.0'

    // S3
    implementation 'com.amazonaws:aws-java-sdk-s3:1.12.782'

    // WEB
    implementation 'org.springframework.boot:spring-boot-starter-web'

    // WEB-FLUX
    implementation 'org.springframework.boot:spring-boot-starter-webflux'

    // VALIDATION
    implementation 'org.springframework.boot:spring-boot-starter-validation'

    // AOP
    implementation 'org.springframework.boot:spring-boot-starter-aop'

    // QUERYDSL
    implementation 'com.querydsl:querydsl-jpa:5.0.0:jakarta'
    implementation 'org.springframework.boot:spring-boot-starter-actuator'
    annotationProcessor "com.querydsl:querydsl-apt:${dependencyManagement.importedProperties['querydsl.version']}:jakarta"
    annotationProcessor "jakarta.annotation:jakarta.annotation-api"
    annotationProcessor "jakarta.persistence:jakarta.persistence-api"

    // caffeine local cache
    implementation 'com.github.ben-manes.caffeine:caffeine:3.1.1'

    // LOMBOK
    compileOnly 'org.projectlombok:lombok'
    annotationProcessor 'org.projectlombok:lombok'

    // SECURITY
    implementation 'org.springframework.boot:spring-boot-starter-security'

    // OAUTH2
    implementation 'org.springframework.boot:spring-boot-starter-oauth2-client'

    // JWT
    implementation 'io.jsonwebtoken:jjwt-api:0.12.3'
    runtimeOnly 'io.jsonwebtoken:jjwt-impl:0.12.3'
    runtimeOnly 'io.jsonwebtoken:jjwt-jackson:0.12.3'

    // MYSQL
    runtimeOnly 'com.mysql:mysql-connector-j'

    // P6SPY
    implementation 'com.github.gavlyukovskiy:p6spy-spring-boot-starter:1.9.0'

    // KAFKA
    implementation 'org.springframework.kafka:spring-kafka'
    testImplementation 'org.springframework.kafka:spring-kafka-test'

    // H2
    runtimeOnly 'com.h2database:h2'

    // TEST
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
}

def querydslDir = "src/main/generated"

sourceSets {
    main.java.srcDirs += [ querydslDir ]
}

tasks.withType(JavaCompile).configureEach {
    options.getGeneratedSourceOutputDirectory().set(file(querydslDir))
}

clean.doLast {
    file(querydslDir).deleteDir()
}

tasks.named('test') {
    useJUnitPlatform()
}



